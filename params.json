{"name":"Atbr","body":"![atbr](https://s3.amazonaws.com/atbr/atbr_small.png)\r\n\r\n### What is atbr?\r\n\r\nlarge-scale in-memory key-value pair store for Python\r\n\r\n\r\n### Why atbr?\r\n\r\n    1) Modern boxes have 10-100s of Gigabytes of RAM\r\n\r\n    2) GB+-size Python dictionaries are slow to fill\r\n\r\n    3) GB+-size Python dictionaries are not fun to use\r\n\r\n    4) GB+-size dictionaries are fun to use\r\n\r\n    5) atbr is fast (in particular to load from file)\r\n\r\n### install\r\n\r\nRun the following to install atbr (including its dependencies)\r\n\r\n    $ cat INSTALL.sh # to see what it does\r\n    $ chmod +x ./INSTALL.sh && sudo ./INSTALL.sh\r\n\r\nit basically does this:\r\n\r\n    $ sudo apt-get install libboost-dev python-setuptools swig* python-dev -y\r\n    $ sudo pip install -r requirements.txt # or under virtualenv\r\n\r\n    $ wget http://sparsehash.googlecode.com/files/sparsehash-2.0.2.tar.gz\r\n    $ tar -zxvf sparsehash-2.0.2.tar.gz\r\n    $ cd sparsehash-2.0.2\r\n    $ ./configure && make && sudo make install\r\n\r\n    $ sudo python setup.py install  # or under virtualenv\r\n\r\n### python-api example\r\n\r\n    from atbr import atbr\r\n\r\n    # Create storage\r\n    mystore = atbr.Atbr()\r\n\r\n    # Load data\r\n    mystore.load(\"keyvaluedata.tsv\")\r\n\r\n    # Number of key value pairs\r\n    print mystore.size()\r\n\r\n    # Get value corresponding to key\r\n    print mystore.get(\"key1\")\r\n    \r\n    # Return true if a key exists\r\n    print mystore.exists(\"key1\")\r\n\r\n### benchmark (loading)    \r\n\r\nInput for the benchmark was output from a small Hadoop (mapreduce) job\r\nthat generated key, value pairs where both the key and value were\r\njson. The benchmark was done an Ubuntu-based Thinkpad x200 with SSD\r\ndrive.\r\n\r\n     $ ls -al medium.tsv\r\n     -rw-r--r-- 1 amund amund 117362571 2012-04-25 15:36 medium.tsv\r\n\r\n     $ wc medium.tsv\r\n     212969   5835001 117362571 medium.tsv\r\n     \r\n     $ python\r\n     >>> import atbr\r\n     >>> a = atbr.Atbr()\r\n     >>> a.load(\"medium.tsv\")\r\n     Inserting took - 1.178468 seconds\r\n     Num new key-value pairs = 212969\r\n     Speed: 180716.807959 key-value pairs per second\r\n     Throughput: 94.803214 MB per second\r\n\r\n### atbr http and websocket server\r\n\r\natbr can also run as a server (default port is 8888), supporting both\r\nhttp and websocket\r\n\r\nStart server:\r\n\r\n     $ cd atbserver ; python atbr_server.py\r\n\r\n\r\n#### HTTP API\r\n\r\nLoad tsv-file data with http     \r\n\r\n     $ curl http://localhost:8888/load/keyvaluedata.tsv\r\n\r\nGet value for key = 'key1'\r\n\r\n    $ curl http://localhost:8888/get/key/key1\r\n\r\nAdd key, value pair key='foo', value='bar'\r\n\r\n    $ curl http://localhost:8888/put/key/foo/value/bar\r\n\r\n#### Websocket API\r\n\r\nExample that loads keyvaluedata.tsv using websocket load api\r\n\r\n     python websocket_cmdline_client.py keyvaluedata.tsv\r\n\r\n##### websocket client code\r\n\r\n      import sys\r\n      from websocket import create_connection\r\n\r\n      ws = create_connection(\"ws://localhost:8888/loadws/\")\r\n      # e.g. sys.argv[1] could 'keyvaluedata.tsv'\r\n      ws.send(sys.argv[1])\r\n      result =  ws.recv()\r\n      ws.close()\r\n      print result\r\n\r\n### What type of datastructure is used in atbr?\r\n\r\nCurrently Google's sparsehash library (a library for memory efficient\r\nhashtables for C++ created by Craig Silverstein). Will probably\r\nsupport other efficient C++-based datastructures in the future.\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n\r\n\r\n","tagline":"large-memory key-value pair store","google":"UA-31247754-1","note":"Don't delete this file! It's used internally to help with page regeneration."}